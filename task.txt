
14 Архитектуры РВС
Achievement #2 - Линейная клиент-серверная архитектура

Необходимо спроектировать и описать на языке UML классическую линейную 3-х уровневую архитектуру:
[КЛИЕНТ]<->ВЕБ-СЕРВЕР<->СЕРВЕР ПРИЛОЖЕНИЙ<->БАЗА ДАННЫХ.

Задача, которую должна выполнять система:
	1.	Обрабатывать HTTP POST запрос, в котором передается натуральное число от 0 до N, в ответ на запрос отправлять число, увеличенное на единицу.
	2.	Обрабатывать исключительную ситуацию #1: если число уже поступало, то выводить ошибку в ответ и лог.
	3.	Обрабатывать исключительную ситуацию #2: если поступившее число на единицу меньше уже обработанного числа, то выводить ошибку в ответ и лог.

1. Стандартная сложность — разработать диаграмму компонентов для системы на языке UML (Component diagram).
2. Средняя сложность — выполнить задание стандартной сложности. Разработать диаграмму последовательностей для системы на языке UML (Sequence diagram).
3. Высокая сложность — выполнить задание средней сложности. Разработать систему на одном из языков программирования Python/PHP/JS.

У нас есть задание - achivment #2, где нужно разработать программу (см. картинку), далее нужно сделать следующее: ENV, Docker File, REST, Kube, DB, ING, Deploy.

Краткое пояснение, что нужно сделать (тут не все пункты описаны):
- добавить в ENV(переменные окружения)
- написать dockerfile ( пример https://github.com/lyzhinIG/CloudComputingHomework/blob/main/achivment3/app/Dockerfile, вроде работает)
- загружаем его на docker hub ( https://hub.docker.com)
- написать yaml файл для развертывания в кластере. (пример пока не рабочий: https://github.com/lyzhinIG/CloudComputingHomework/blob/main/achivment3.2/app-19.yaml)
- поднять соответствующую ачивке 2 базу данных в кластере. (пример для mariadb - https://mariadb.org/start-mariadb-in-k8s )